<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>BioFSharp.Mz</name></assembly>
<members>
<member name="M:BioFSharp.Mz.TaggedPeak.createTaggedPeakOf(BioFSharp.Mz.TaggedMass.TaggedMass,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.Mz.Ions.IonTypeFlag,System.Double})">

</member>
<member name="M:BioFSharp.Mz.TaggedPeak.createTaggedPeak(BioFSharp.Mz.Ions.IonTypeFlag,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.TaggedMass.createTaggedNH3Loss(BioFSharp.Mz.Ions.IonTypeFlag,System.Double)">

</member>
<member name="M:BioFSharp.Mz.TaggedMass.createTaggedH2OLoss(BioFSharp.Mz.Ions.IonTypeFlag,System.Double)">

</member>
<member name="M:BioFSharp.Mz.TaggedMass.createTaggedMass(BioFSharp.Mz.Ions.IonTypeFlag,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Peaks.createPeakFamily``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})">

</member>
<member name="M:BioFSharp.Mz.Peaks.createPeakAnnotation``1(``0,BioFSharp.Mz.Peak)">

</member>
<member name="M:BioFSharp.Mz.Peaks.createTag``2(``0,``1)">

</member>
<member name="M:BioFSharp.Mz.Peaks.createPeak(System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.PeakArray.peaksToNearestUnitDaltonBinVector``1(``0[],System.Double,System.Double)">
<summary>
 Bins peaks to their nearest 1 Da bin
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakArray.peaksToNearestUnitDaltonBin``1(``0[],System.Int32,System.Int32)">
<summary>
 Bins peaks to their nearest 1 Da bin
</summary>
</member>
<member name="M:BioFSharp.Mz.PeakArray.binToUpperIntergerMass``1(``0[],System.Int32,System.Int32)">
<summary>
 Bins peaks to their next upperIntegerMass bin
</summary>
</member>
<member name="M:BioFSharp.Mz.Cache.containsItemsBetween``2(System.Collections.Generic.SortedList{``0,``1},``0,``0)">

</member>
<member name="M:BioFSharp.Mz.Cache.getValuesByIdx``2(System.Collections.Generic.SortedList{``0,``1},System.Int32,System.Int32)">

</member>
<member name="M:BioFSharp.Mz.Cache.getValuesBy``2(System.Collections.Generic.SortedList{``0,``1},``0,``0)">

</member>
<member name="M:BioFSharp.Mz.Cache.getItemsByIdx``2(System.Collections.Generic.SortedList{``0,``1},System.Int32,System.Int32)">

</member>
<member name="M:BioFSharp.Mz.Cache.getItemsByRange``2(System.Collections.Generic.SortedList{``0,``1},``0,``0)">

</member>
<member name="M:BioFSharp.Mz.Cache.getItemBy``2(System.Collections.Generic.SortedList{``0,``1},``0)">

</member>
<member name="M:BioFSharp.Mz.Cache.bulkDeleteBy``3(System.Collections.Generic.SortedList{``0,``1},``0)">

</member>
<member name="M:BioFSharp.Mz.Cache.bulkInsertBy``2(System.Collections.Generic.SortedList{``0,``1},Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">

</member>
<member name="M:BioFSharp.Mz.Cache.addItem``2(System.Collections.Generic.SortedList{``0,``1},``0,``1)">

</member>
<member name="M:BioFSharp.Mz.Cache.binarySearch``2(BioFSharp.Mz.Cache.Border,System.Collections.Generic.SortedList{``0,``1},``0)">

</member>
<member name="M:BioFSharp.Mz.Cache.createCacheWith``2(System.Collections.Generic.IComparer{``0},System.Int32)">

</member>
<member name="M:BioFSharp.Mz.Cache.createCacheWithComp``2(System.Collections.Generic.IComparer{``0})">

</member>
<member name="M:BioFSharp.Mz.Cache.createCacheWithCap``2(System.Int32)">

</member>
<member name="M:BioFSharp.Mz.Cache.createCache``2">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.upperIdxBy(System.Double[],System.Double,System.Double)">
<summary>
 Returns a Index that accesses the mzData Array at a position determined by a precursorMz at the upper end of a given windowwidth 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.lowerIdxBy(System.Double[],System.Double,System.Double)">
<summary>
 Returns a Index that accesses the mzData Array at a position determined by a precursorMz at the lower end of a given windowwidth 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.windowToCentroid(Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Tuple{System.Double[],System.Double[]}}},System.Double[],System.Double[],System.Int32,System.Int32)">
<summary>
 Returns mzIntensityArray consisting of centroided Peaks. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.toCentroid``2(Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Double[],System.Tuple{``0[],``1[]}}},System.Double[],System.Double[])">
<summary>
 Returns mzIntensityArray consisting of centroided Peaks. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.filterByIntensitySNR(System.Double,System.Double,System.Double[],System.Double[])">
<summary>
 Returns mzIntensityArray after noise reduction 
</summary>
</member>
<member name="T:BioFSharp.Mz.SignalDetection.Wavelet.WaveletParameters">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.toCentroid(Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Double[],Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double[]}}}}}}},System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[])">
<summary>
 Returns a MzIntensityArray that containing the spectral centroids of the input spectra. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.refinePeaks(System.Double,System.Double,System.Double[],System.Double[],System.Double[],System.Collections.Generic.List{BioFSharp.Mz.SignalDetection.Wavelet.RidgeLine},System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.getSNRFilteredPeakLines(System.Double,System.Double,System.Int32,System.Double[],System.Collections.Generic.List{BioFSharp.Mz.SignalDetection.Wavelet.RidgeLine},System.Double[0:,0:])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.ricker2d(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.getScales(System.Int32,System.Double[],System.Double,System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Int32[0:,0:,0:],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.convertColToMz(System.Double[],System.Int32)">
<summary>
 Helperfunction to get mz back of Columnnumber
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.createPadding(System.Int32,System.Double[],System.Double[],System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.getNpointsX(System.Int32,System.Int32,System.Double,System.Int32[0:,0:,0:],System.Double[])">
<summary>
 Helperfunction to calculate the mz values left and right from the target value which will be included in the computation of 
 the CWT correlation coefficient
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.createWaveletParameters(System.Int32,System.Double,System.Double,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Wavelet.createRidgeLine(System.Int32,System.Int32)">

</member>
<member name="T:BioFSharp.Mz.SignalDetection.Care.Extrema">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.scoreAtPercentile(System.Double,System.Int32,System.Double[])">
<summary>
 Helper function for determining the score in a (sorted) vector at a given percentile
 end of getScoreAtPercentile. Allow passing of length of vector in case you only 
 want a slice of the first portion of a vector;
 perc should not be a fraction (e.g. 5th per centile = 5.0)
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.accumulate``2(System.Int32,System.Int32,``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``0}},``1[])">
<summary>
 Helper function to accumulate Array values
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.createXspacing(System.Double[])">
<summary>
 Returns a Array containing the distances between adjacent mz values of the input array.
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.labelPeaks(System.Double,System.Double,System.Double[],System.Double[])">
<summary>
 Returns a collection of local Maxima and Minima. Attention: The algorithm is very sensitive to noise   
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.localMinimaIdx(System.Double[],System.Double[])">
<summary>
 Returns a collection of indices corresponding to local minima. Attention: The algorithm is very sensitive to noise   
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.localMinima(System.Double[],System.Double[])">
<summary>
 Returns a collection of local minima. Attention: The algorithm is very sensitive to noise   
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.localMaximaIdx(System.Double,System.Double[],System.Double[])">
<summary>
 Returns a collection of indices corresponding to local maxima. Attention: The algorithm is very sensitive to noise and behaves irregulary for negative Y-values.
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.localMaxima(System.Double,System.Double[],System.Double[])">
<summary>
 Returns a collection local maxima. Attention: The algorithm is very sensitive to noise and behaves irregulary for negative Y-values.
</summary>
</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.calc``1(``0,System.Int32,System.Int32,System.Int32,System.Int32)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.getColHighBound(System.Double[],System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Care.getColLowBound(System.Double[],System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SignalDetection.Filtering.savitzky_golay(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])">
<summary>
 Smooth (and optionally differentiate) data with a Savitzky-Golay filter.
 The Savitzky-Golay filter is a type of low-pass filter and removes high frequency noise from data.
</summary>
</member>
<member name="P:BioFSharp.Mz.ChargeState.ChargeDetermParams.DeltaMinIntensity">
<summary>
 RelativeToPriorPeak
</summary>
</member>
<member name="P:BioFSharp.Mz.ChargeState.ChargeDetermParams.MinIntensity">
<summary>
 RelativeToStartPeak
</summary>
</member>
<member name="P:BioFSharp.Mz.ChargeState.ChargeDetermParams.Width">
<summary>
TODO: learn from Data
</summary>
</member>
<member name="P:BioFSharp.Mz.ChargeState.ChargeDetermParams.ExpectedMaximumCharge">
<summary>
TODO: learn from Data
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.kullbackLeiblerDivergenceOf(System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.ChargeState.poissonEstofMassTrunc(Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double},System.Int32,System.Double)">

</member>
<member name="M:BioFSharp.Mz.ChargeState.poissonProb(System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.ChargeState.n15MassToLambda(System.Double)">

</member>
<member name="M:BioFSharp.Mz.ChargeState.n14MassToLambda(System.Double)">

</member>
<member name="M:BioFSharp.Mz.ChargeState.normalizePeaksByIntensitySum(Microsoft.FSharp.Collections.FSharpSet{BioFSharp.Mz.Peak})">

</member>
<member name="M:BioFSharp.Mz.ChargeState.removeSubSetsOfBestHit(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.ChargeState.TestedItem{BioFSharp.Mz.ChargeState.AssignedCharge}})">
<summary>
 Returns a List of tested AssignedCharges. This Function eliminates all
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.peakPosStdDevBy(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.ChargeState.AssignedCharge})">
<summary>
 Returns the StandardDeviation of the PeakDistances
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.putativePrecursorChargeStatesBy(BioFSharp.Mz.ChargeState.ChargeDetermParams,System.Double[],System.Double[],System.Double)">
<summary>
 Returns list of putative precursorChargeStates along with Properties used for evaluation.
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.empiricalRightPValueOf``1(``0[],``0)">
<summary>
 Returns the empirically determined PValue. The PValue is the quotient of simulated mzChargeDeviations lower than the mzChargeDeviation
 observed divided by their total number
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.empiricalPValueOfSim``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2[]},``0,``1,``2)">
<summary>
stdv 0.01516580549
 Returns the empirically determined PValue. The PValue is the quotient of simulated mzChargeDeviations lower than the mzChargeDeviation
 observed divided by their total number
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.initMzDevOfRndSpec(System.Random,BioFSharp.Mz.ChargeState.ChargeDetermParams,System.Double)">
<summary>
 Returns Function to generate random spectra and to calculate their mzChargeDeviations.   
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.mzDevOfRndSpec(System.Random,BioFSharp.Mz.ChargeState.ChargeDetermParams,System.Double,System.Int32,System.Double)">
<summary>
 Creates a user defined amount of random spectra of defined length. Returns the mzChargeDeviation of each simulated Spectrum
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.rndMzIntensityEntityCollectionBy(System.Random,System.Double,System.Int32,System.Double,System.Int32)">
<summary>
 Creates a random MzIntensityEntityCollection  
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.interPeakDistanceBy(System.Double,System.Double)">
<summary>
 Returns a possible InterPeakDistance by a given charge state. The retrieved distance follows a normaldistribution
 centered around the theoretical interPeakDistance. The standardDeviation is dependent on the used mass spectrometer
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.rndIntBetween(System.Random,System.Int32,System.Int32)">
<summary>
 Returns a random integer between a lower and a upper Value
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.getScore(System.Int32,System.Int32,System.Double)">
<summary>
 Returns a empirically determined Score to achieve a Ranking of SubSets. The optimal weighting of the parameters was
 determined via Linear Discriminant Analysis.  
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.mzChargeDeviationBy(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
<summary>
 Returns the MZChargeDeviation based on the theoreticalInterIsotopeDistance as a Measure for central tendency
 at a given ChargeState. 
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.getChargeBy(BioFSharp.Mz.ChargeState.ChargeDetermParams,System.Double)">
<summary>
 Returns a charge state based on a given meanOfInterPeakDistances. The list of possible charge states is defined by
 the user.  
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.mzDistancesOf``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Calculates the mzDistances of a List of MzIntensityPeaks
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.powerSetOf(BioFSharp.Mz.ChargeState.PutativeIsotopeCluster)">
<summary>
 Creates the PowerSet of a given Collection of MZIntensityPeaks. Adds a StartPeak with the relative Position 0 and the 
 relative Intensity 1 to each subSet. 
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.getRelPeakPosInWindowBy(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Int32)">
<summary>
 Returns a Collection of MZIntensityPeaks, The Collection starts with the first Element on the right side of the startIdx. 
 and ends either with the last element of the mzIntensityArray or when the MzDistance to the highest Peak exceeds 
 the given windowwidth.   
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.idxOfClosestPeakBy(System.Double[],System.Double[],System.Double)">
<summary>
 TODO refactor to SignalDetection 
 Returns Index of the highestPeak flanking a given mzValue
</summary>
</member>
<member name="M:BioFSharp.Mz.ChargeState.idxOfHighestPeakBy(System.Double[],System.Double[],System.Double)">
<summary>
 Returns Index of the highestPeak flanking a given mzValue
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.getSDBParamsBy(System.String)">
<summary>
 Returns SearchDbParams of a existing database by filePath
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.getPeptideLookUpWithMemBy(Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid}}}},System.Collections.Generic.SortedList{System.Int64,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid}}},System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SearchDB.getPeptideLookUpBy(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns a LookUpResult list 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.getPeptideLookUpFromFileBy(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns a LookUpResult list
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.createLookUpResultBy(Microsoft.FSharp.Collections.FSharpMap{System.String,BioFSharp.Mz.SearchDB.SearchModification},BioFSharp.Mz.SearchDB.SearchDbParams,System.Int32,System.Int32,System.Double,System.Int64,System.String,System.Int32)">
<summary>
 Creates a LookUpResult out of a entry in the ModSequence table
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.createPeptideWithMass``1(``0,System.Double)">
<summary>
 Creates PeptideWithMass record
</summary>
</member>
<member name="P:BioFSharp.Mz.SearchDB.listOfAA">
<summary>
needed as input if element of SearchModSite is of UnionCase | Any
</summary>
</member>
<member name="T:BioFSharp.Mz.SearchDB.ModCombinator.AminoAcidWithFlag">
<summary>
 Flag indicates if potential modification is fixed
</summary>
</member>
<member name="T:BioFSharp.Mz.SearchDB.ModCombinator.ModLookUpFunc">
<summary>
 Type abreviation
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.combineToModString(BioFSharp.Mz.SearchDB.ModCombinator.ModLookUp,System.Int32,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns a list of all possible modified petide sequences and its masses according to the given modification-lookUp.
 The peptide sequence representation is ModString.
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.ToModStringBy(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpOption{System.String}},BioFSharp.AminoAcids.AminoAcid)">
<summary>
 Returns a ModString representation. 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.combine``1(BioFSharp.Mz.SearchDB.ModCombinator.ModLookUp,System.Int32,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.IBioItem,System.Double},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.AminoAcids.AminoAcid,``0}},``0,Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">
<summary>
 Returns a list of all possible modified petide sequences and its masses according to the given modification-lookUp.
 It uses the given bioitem -&gt; mass function and a function to aggregate the sequence.
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.setVarModByLookUp(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.AminoAcids.AminoAcid,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{BioFSharp.ModificationInfo.Modification}}},BioFSharp.Mz.SearchDB.ModCombinator.AminoAcidWithFlag)">
<summary>
Returns modified or unmodified AminoAcid depending on the matching expression in a AminoAcidWithFlag struct
The boolean value &quot;false&quot; is used to state that the Modification is fixed    
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.setFixModByLookUp(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.AminoAcids.AminoAcid,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{BioFSharp.ModificationInfo.Modification}}},BioFSharp.Mz.SearchDB.ModCombinator.AminoAcidWithFlag)">
<summary>
Returns modified or unmodified AminoAcid depending on the matching expression in a AminoAcidWithFlag struct
The boolean value &quot;false&quot; is used to state that the Modification is fixed    
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.modLookUpOf(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns the ModLookup according to given SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.ModCombinator.convertSearchModification(Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},BioFSharp.Mz.SearchDB.SearchModification)">
<summary>
 Returns a list of all possible modified AminoAcids given the particular Searchmodification
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.bulkInsert(System.Data.SQLite.SQLiteConnection,System.Collections.Generic.IEnumerable{BioFSharp.Mz.SearchDB.ProteinContainer})">
<summary>
 Bulk insert for a sequence of ProteinContainers
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.initDB(System.String)">
<summary>
 Create a new file instance of the DB schema. Deletes already existing instance.
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.isExistsBy(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns true if a db exists with the same parameter content
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.xModToSearchMod(System.Data.SQLite.SQLiteConnection,BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Builds xModToSearchMod Map from DB by given SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.selectSdbParamsby(System.Data.SQLite.SQLiteConnection,BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Select SearchDbParams entry from DB by given SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.insertSdbParams(System.Data.SQLite.SQLiteConnection,BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Inserts SearchDbParams into DB
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.getJsonStringOf``1(``0)">
<summary>
 Returns a comma seperated string of given search modification list
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.getNameOf(BioFSharp.Mz.SearchDB.SearchDbParams)">
<summary>
 Returns the database name given the SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceBySequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by Sequence
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByMassRange(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select a ModSequence entry by Massrange (Between selected Mass -/+ the selected toleranceWidth)
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByMass(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by Mass
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByPepSequenceID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by PepSequenceID
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectModsequenceByModSequenceID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a ModSequence entry by ModSequenceID
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectPepSequenceBySequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a PepSequence entry by PepSequence - Version without try.. with pattern to enhance the Select performance
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectPepSequenceBySequence'(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a PepSequence entry by PepSequence 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectCleavageIndexByPepSequenceID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a CleavageIndex entry PepSequenceID 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectCleavageIndexByProteinID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a CleavageIndex entry ProteinID 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectProteinBySequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a Protein entry by Sequence     
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectProteinByAccession(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a Protein entry by Accession     
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectProteinByID(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to select a Protein entry by ID        
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectSearchModsbyParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select all SearchModifications by SearchDbParams
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareSelectSearchDbParamsbyParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select all SearchDbParams entries by FastaPath, Protease, MinmissedCleavages, MaxmissedCleavages, MaxMass, MinPepLength, MaxPepLength, IsotopicLabel, MassMode, FixedMods, VariableMods, VarModsThreshold
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.selectSearchDbParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to select all SearchDbParams 
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertSearchDbParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Prepares statement to insert a SearchDBParams entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertModSequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to insert a ModSequence entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertPepSequence(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to insert a PepSequence entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertCleavageIndex(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to insert a CleavageIndex entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.prepareInsertProtein(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
<summary>
 Prepares statement to insert a Protein entry
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTableModSequence(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table ModSequence
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTablePepSequence(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table PepSequence
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTableCleavageIndex(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table CleavageIndex
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTableProtein(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table Protein
</summary>
</member>
<member name="M:BioFSharp.Mz.SearchDB.Db.SQLiteQuery.createTableSearchDbParams(System.Data.SQLite.SQLiteConnection)">
<summary>
 Creates Table SearchDbParams
</summary>
</member>
<member name="T:BioFSharp.Mz.SearchDB.Db.SQLiteQuery">
<summary>
  Prepared statements via Closure
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Parent.prepareSelectParentbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Parent.prepareSelectParentbyCountry``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Parent.prepareSelectParentbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Parent.prepareSelectParentbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.AnalysisSoftware.prepareSelectAnalysisSoftwarebyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.AnalysisSoftware.prepareSelectAnalysisSoftwarebyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.AnalysisSoftware.prepareSelectAnalysisSoftwarebyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Organization.prepareSelectOrganizationbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Organization.prepareSelectOrganizationbyParent_ID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Organization.prepareSelectOrganizationbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Organization.prepareSelectOrganizationbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyOrganisationID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyMiddleName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyLastName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyFirstName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Person.prepareSelectPersonbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionProtocol.prepareSelectProteinDetectionProtocolbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionProtocol.prepareSelectProteinDetectionProtocolbyAnalysisSoftwareID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionProtocol.prepareSelectProteinDetectionProtocolbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionProtocol.prepareSelectProteinDetectionProtocolbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationProtocol.prepareSelectSpectrumIdentificationProtocolbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationProtocol.prepareSelectSpectrumIdentificationProtocolbyAnalysisSoftwareID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationProtocol.prepareSelectSpectrumIdentificationProtocolbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationProtocol.prepareSelectSpectrumIdentificationProtocolbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbySpectrumIdentficationProtocolID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbySpectrumIdentficationListID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbyActivityDate``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentification.prepareSelectSpectrumIdentificationbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinAmbiguityGroup.prepareSelectProteinAmbiguityGroupbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinAmbiguityGroup.prepareSelectProteinAmbiguityGroupbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinAmbiguityGroup.prepareSelectProteinAmbiguityGroupbyProteinDetectionListID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinAmbiguityGroup.prepareSelectProteinAmbiguityGroupbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideHypothesis.prepareSelectPeptideHypothesisbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideHypothesis.prepareSelectPeptideHypothesisbyProteinDetectionHypothesisID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideHypothesis.prepareSelectPeptideHypothesisbyPeptideEvidenceID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideHypothesis.prepareSelectPeptideHypothesisbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbySearchDBID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbyAccession``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionList.prepareSelectProteinDetectionListbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyPassThreshold``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyProteinAmbiguityGroupID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyDBSequenceID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ProteinDetectionHypothesis.prepareSelectProteinDetectionHypothesisbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyFKRelatedTerm``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyRelationShipType``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyTermID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermRelationShip.prepareSelectTermRelationShipbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyValue``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyTermID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.TermTag.prepareSelectTermTagbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Ontology.prepareSelectOntologybyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Ontology.prepareSelectOntologybyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyAvgMassDelta``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyMonoisotopicMassDelta``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyResidues``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Modification.prepareSelectModificationbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyResidue``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyLocation``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyModificationID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyPeptideID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.ModLocation.prepareSelectModLocationbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationList.prepareSelectSpectrumIdentificationListbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationList.prepareSelectSpectrumIdentificationListbyNumSequencesSearched``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationList.prepareSelectSpectrumIdentificationListbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationList.prepareSelectSpectrumIdentificationListbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbySpectrumIdentficationListID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbySpectraDataID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbySpectrumID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationResult.prepareSelectSpectrumIdentificationResultbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Term.prepareSelectTermbyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Term.prepareSelectTermbyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Term.prepareSelectTermbyOntologyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Term.prepareSelectTermbyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyFragmentation``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyCalculatedPI``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyChargeState``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyExperimentalMassToCharge``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyCalculatedMassToCharge``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyRank``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyPassThreshold``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyMassTableID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyPeptideID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembySampleID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembySpectrumIdentificationResultID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.SpectrumIdentificationItem.prepareSelectSpectrumIdentificationItembyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Peptide.prepareSelectPeptidebyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Peptide.prepareSelectPeptidebySequence``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.Peptide.prepareSelectPeptidebyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyTranslationsID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyPost``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyPre``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyEnd``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyStart``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyFrame``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyisDecoy``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyPeptideID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyDBSequenceID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.PeptideEvidence.prepareSelectPeptideEvidencebyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebyRowVersion``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebySearchDBID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebyName``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebyAccession``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Db.DBSequence.prepareSelectDBSequencebyID``1(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">

</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.ParamContainer.ParamContainer">
<summary>
 Type ParamContainer
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.getValueAsString(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get value as string by termid or empty string
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.getValueAsInt(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get value as int32 by termid or &apos;-1&apos;
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.getValueAsFloat(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get value as float by termid or &apos;nan&apos;
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.tryGetCvParam(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get optional CvParam by id 
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.ParamContainer.getCvParam(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam})">
<summary>
 Get CvParam by id (Function can fail)
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.ParamContainer">
<summary>
 Module containing functions to operate on ParamContainer
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.CvParam.createCvParamValueWithUnit(BioFSharp.Mz.MzIdentMLModel.DataModel.Term,System.IConvertible,BioFSharp.Mz.MzIdentMLModel.DataModel.Term)">
<summary>
 Creates a controlled vocabulary parameter value with unit term 
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.CvParam.ofValue(BioFSharp.Mz.MzIdentMLModel.DataModel.Term,System.IConvertible)">
<summary>
 Creates a controlled vocabulary parameter value
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.CvParam.createWithUnit(System.Guid,BioFSharp.Mz.MzIdentMLModel.DataModel.Term,System.IConvertible,BioFSharp.Mz.MzIdentMLModel.DataModel.Term)">
<summary>
 Creates a controlled vocabulary parameter with unit term 
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.CvParam.create(System.Guid,BioFSharp.Mz.MzIdentMLModel.DataModel.Term,System.IConvertible)">
<summary>
 Creates a controlled vocabulary parameter
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.CvParam">
<summary>
 Module containing functions to operate on controlled vocabulary parameter
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Term.create(System.String,System.String,System.String)">
<summary>
 Creates a controlled vocabulary term
</summary>
</member>
<member name="M:BioFSharp.Mz.MzIdentMLModel.Term.initOf(System.String,System.String,System.String,System.DateTime)">
<summary>
 Creates a controlled vocabulary term with rowVersion
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.Term">
<summary>
 Module containing functions to operate on controlled vocabulary term
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.DataModel.CvParam">
<summary>
 Define a controlled vocabulary parameter
</summary>
</member>
<member name="P:BioFSharp.Mz.MzIdentMLModel.DataModel.Term.Id">
<summary>
 accession number
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.DataModel.Term">
<summary>
 Define a controlled vocabulary term
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.DataModel.TermId">
<summary>
 Term (cv) accession number
</summary>
</member>
<member name="T:BioFSharp.Mz.MzIdentMLModel.DataModel">
<summary>
 Module containing all data types used in the model
</summary>
</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.zOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.yOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.xOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.yzOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.xzOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.xyOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.xyzOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.cOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.bOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.aOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.bcOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.acOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.abOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.Series.abcOfBioList(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.xyzfragmentMassesOf(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},BioFSharp.Mz.Ions.IonTypeFlag,Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.abcfragmentMassesOf(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},BioFSharp.Mz.Ions.IonTypeFlag,Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.peptideLadderElementOf(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{BioFSharp.AminoAcids.AminoAcid,BioFSharp.Mz.TaggedMass.TaggedMass}}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Boolean,System.Boolean,System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createZIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createXIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createYIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createCIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createAIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.createBIonTaggedMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcZIonFragMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcXIonFragMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcCIonFragMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcAIonFragMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.Fragmentation.BioList.calcBorYIonFragMass(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,BioFSharp.AminoAcids.AminoAcid)">

</member>
<member name="M:BioFSharp.Mz.TheoreticalSpectra.getTheoSpecs``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Double,System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},``0}}}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,System.Double,System.Int32,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid}})">

</member>
<member name="M:BioFSharp.Mz.TheoreticalSpectra.getTheoSpec``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Double,System.Double},Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{BioFSharp.AminoAcids.AminoAcid},``0}}}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,System.Double,System.Int32,BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid})">

</member>
<member name="M:BioFSharp.Mz.TheoreticalSpectra.createTheoreticalSpectrum``1(BioFSharp.Mz.SearchDB.LookUpResult{BioFSharp.AminoAcids.AminoAcid},``0,``0)">

</member>
<member name="M:BioFSharp.Mz.SearchEngineResult.createSearchEngineResult``1(BioFSharp.Mz.SearchEngineResult.SearchEngine,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.Int32,System.Double,System.Double,System.Double,System.Int32,``0,System.Double)">

</member>
<member name="M:BioFSharp.Mz.SequestLike.calcDeltaCN(Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.SearchEngineResult.SearchEngineResult{System.Double}})">
<summary>
 Calculates sequest-like deltaCN score
  (Xcorr(top hit) - Xcorr(n)) ÷ Xcorr(top hit). Thus, the deltaCn for the top hit is
  (Xcorr(top hit) - Xcorr(top hit)) ÷ Xcorr(top hit) = 0.
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.spectrumToIntensityArrayMinusAutoCorrelation``1(System.Double,System.Double,``0[])">
<summary>
 Measured spectrum to sequest-like normalized intensity array
 minus auto-correlation (delay 75 -&gt; like in original sequest algorithm)
 ! Uses 10 as number of windows for window normalization (like in original sequest algorithm)    
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.peaksToNormalizedIntensityArray(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{BioFSharp.Elements.Element,System.Double},System.Double},System.Double,System.Double,System.Double,Microsoft.FSharp.Collections.FSharpList{BioFSharp.Mz.PeakFamily{BioFSharp.Mz.TaggedMass.TaggedMass}})">
<summary>
 Amino acid sequence (peptide) to sequest-like predicted intensity array
</summary>
</member>
<member name="M:BioFSharp.Mz.SequestLike.windowNormalizeIntensities(MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Int32)">
<summary>
 normalize the intensities within a window to maximum of the window
 Attention shortens the array  (cuts)
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.MyQuant.quantify(Microsoft.FSharp.Core.FSharpFunc{BioFSharp.Mz.Tag{BioFSharp.Mz.SignalDetection.Care.Extrema,System.Tuple{System.Double,System.Double}}[],Microsoft.FSharp.Core.FSharpFunc{BioFSharp.Mz.SignalDetection.Care.Extrema,Microsoft.FSharp.Core.FSharpFunc{System.Double,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Int32,BioFSharp.Mz.Tag{BioFSharp.Mz.SignalDetection.Care.Extrema,System.Tuple{System.Double,System.Double}}}}}}},System.Int32,System.Double,System.Double,System.Double,System.Double[],System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.MyQuant.findRightFittingIdx(System.Tuple{System.Double,System.Double}[],BioFSharp.Mz.Tag{BioFSharp.Mz.SignalDetection.Care.Extrema,System.Tuple{System.Double,System.Double}}[],System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Int32})">

</member>
<member name="P:BioFSharp.Mz.Quantification.MyQuant.createGaussSolverOption">

</member>
<member name="P:BioFSharp.Mz.Quantification.MyQuant.createEMGSolverOption">

</member>
<member name="T:BioFSharp.Mz.Quantification.Fitting.SolverOptions">

</member>
<member name="P:BioFSharp.Mz.Quantification.Fitting.Model.GetGradientValue">
<summary>
Gradient: Vector of partial derivations of function body
</summary>
</member>
<member name="P:BioFSharp.Mz.Quantification.Fitting.Model.GetFunctionValue">
<summary>
originally GetValue; contains function body
</summary>
</member>
<member name="T:BioFSharp.Mz.Quantification.Fitting.Model">

</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.levenbergMarquardtSolver(BioFSharp.Mz.Quantification.Fitting.Model,BioFSharp.Mz.Quantification.Fitting.SolverOptions,System.Double[],System.Double[],System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Double.DenseVector})">
<summary>
 Returns a parameter vector as a possible solution for linear least square based nonlinear fitting of a given dataset (xData, yData) with a given 
 model function. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.gaussNewtonSolver(BioFSharp.Mz.Quantification.Fitting.Model,BioFSharp.Mz.Quantification.Fitting.SolverOptions,System.Double[],System.Double[],System.Collections.Generic.List{MathNet.Numerics.LinearAlgebra.Double.DenseVector})">
<summary>
 Returns a parameter vector as a possible solution for linear least square based nonlinear fitting of a given dataset (xData, yData) with a given 
 model function. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.shouldTerminate(System.Double,System.Double,System.Int32,MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector,BioFSharp.Mz.Quantification.Fitting.SolverOptions)">
<summary>
 Returns true if convergence criteria are met or a user defined number of iiterations has been carried out
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.getResidualVector(BioFSharp.Mz.Quantification.Fitting.Model,System.Int32,System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
<summary>
 Returns the residual vector, each row i contains the difference between the yEst_i and the yData_i. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.getJacobianOf(BioFSharp.Mz.Quantification.Fitting.Model,System.Int32,System.Double[],MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.Matrix)">
<summary>
 Returns the Jacobian matrix of a given model and discrete parameters.
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.getRSS(BioFSharp.Mz.Quantification.Fitting.Model,System.Double[],System.Double[],MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
<summary>
 Returns the residual sum of squares (RSS) as a measure of discrepancy between the data and the used estimation model.
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.createSolverOption(System.Double,System.Double,System.Int32,System.Double[])">

</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.createModel(System.String,System.String[],Microsoft.FSharp.Core.FSharpFunc{MathNet.Numerics.LinearAlgebra.Double.DenseVector,Microsoft.FSharp.Core.FSharpFunc{System.Double,System.Double}},Microsoft.FSharp.Core.FSharpFunc{MathNet.Numerics.LinearAlgebra.Double.DenseVector,Microsoft.FSharp.Core.FSharpFunc{MathNet.Numerics.LinearAlgebra.Double.DenseVector,Microsoft.FSharp.Core.FSharpFunc{System.Double,MathNet.Numerics.LinearAlgebra.Double.DenseVector}}})">

</member>
<member name="M:BioFSharp.Mz.Quantification.Fitting.standardErrorOfPrediction(System.Double,System.Double[],System.Double[])">

</member>
<member name="P:BioFSharp.Mz.Quantification.Fitting.Table.emgModel">
<summary>
 Exponentially modified Gaussian (EMG)
</summary>
</member>
<member name="P:BioFSharp.Mz.Quantification.Fitting.Table.gaussModel">
<summary>
 Gaussian function
</summary>
</member>
<member name="P:BioFSharp.Mz.Quantification.Fitting.Table.parabolaModel">
<summary>
 Parabola
</summary>
</member>
<member name="P:BioFSharp.Mz.Quantification.Fitting.Table.lineModel">
<summary>
 Line  
</summary>
</member>
<member name="T:BioFSharp.Mz.Quantification.Fitting.Table">

</member>
<member name="T:BioFSharp.Mz.Quantification.GaussEstimation.GaussParams">

</member>
<member name="M:BioFSharp.Mz.Quantification.GaussEstimation.caruanaAlgorithm(System.Double[],System.Double[])">
<summary>
 Estimates the Parameters of a Gaussian function
 Warning: This method is sensitive to noisy data. If the noise level of the input parameters is high, smoothing of 
 the data is strongly recommended. 
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.GaussEstimation.expModGaussFunc(System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
 Returns the yValue of a exponentially modified gauss function at a given position.
 The function parameter tau represents the exponential relaxation time which is the inverse of the exponential decay parameter.
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.GaussEstimation.gaussFunc(System.Double,System.Double,System.Double,System.Double)">
<summary>
 Returns the yValue of a gauss function at a given position x.
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.GaussEstimation.toFWHM(System.Double)">
<summary>
 Returns the full width at half maximum  
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.GaussEstimation.toSTD(System.Double)">
<summary>
 Returns the value of the standard deviation
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.GaussEstimation.createGausParams(System.Double,System.Double,System.Double,System.Double)">

</member>
<member name="M:BioFSharp.Mz.Quantification.Integration.trapezEstAreaOf(System.Double[],System.Double[])">
<summary>
 Returns the estimated area beneath the data using the trapezoidal rule.
</summary>
</member>
<member name="M:BioFSharp.Mz.Quantification.Integration.trapezEstAreaOfUniform(System.Double[],System.Double[])">
<summary>
 Returns the estimated area beneath the data using the trapezoidal rule. Requires uniform spaced datapoints. 
</summary>
</member>
</members>
</doc>
