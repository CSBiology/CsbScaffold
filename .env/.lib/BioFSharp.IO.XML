<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>BioFSharp.IO</name></assembly>
<members>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsWellAboveBG_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsWellAboveBG_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGSubSigError_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGSubSigError_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGSubSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGSubSignal_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsSaturated_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsSaturated_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGMedianSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGMedianSignal_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGMeanSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.BGMeanSignal_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.MedianSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.MeanSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.MeanSignal_green">
<summary>
 Mean raw signal calculated from the intensities of all inlier pixels that represents the feature (after outlier pixel rejection). Also called the foreground signal.
</summary>
</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProcessedSigError_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProcessedSigError_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProcessedSignal_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProcessedSignal_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsFound_red">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.IsFound_green">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.PositionY">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.PositionX">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProbeName">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ControlType">
<summary>
 Feature control type
</summary>
</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.ProbeUID">

</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.Col">
<summary>
 Feature location : column
</summary>
</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.Row">
<summary>
  Feature location : row
</summary>
</member>
<member name="P:BioFSharp.IO.AgilentRaw.AgilentDataRaw.FeatureNum">
<summary>
 Feature number
</summary>
</member>
<member name="T:BioFSharp.IO.AgilentRaw.AgilentDataRaw">
<summary>
 Record type representing microarray Agilent raw data item 
</summary>
</member>
<member name="T:BioFSharp.IO.AgilentRaw.ProbeMapping">
<summary>
 Record type representing microarray probe mapping
</summary>
</member>
<member name="M:BioFSharp.IO.AgilentRaw.readAgilentDataRaw(System.String)">
<summary>
 Reads agilent raw data from file
</summary>
</member>
<member name="M:BioFSharp.IO.AgilentRaw.probeMappingReader(System.Char,System.Boolean,System.String)">
<summary>
 Reads probe mapping. Map: probe name -&gt; gene name 
</summary>
</member>
<member name="M:BioFSharp.IO.BlastNCBI.BlastWrapper.makeblastdb(System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.BlastNCBI.Parameters.MakeDbParams})">
<summary>
Creates a BLAST databse from given source/s
</summary>
</member>
<member name="M:BioFSharp.IO.BlastNCBI.BlastWrapper.blastP(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.BlastNCBI.Parameters.BlastParams})">
<summary>
Compares a protein query to a protein database
</summary>
</member>
<member name="M:BioFSharp.IO.BlastNCBI.BlastWrapper.blastN(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.BlastNCBI.Parameters.BlastParams})">
<summary>
Compares a nucleotide query to a nucleotide database
</summary>
</member>
<member name="T:BioFSharp.IO.BlastNCBI.BlastWrapper">
<summary>
A Wrapper to perform different BLAST tasks
</summary>
</member>
<member name="T:BioFSharp.IO.FastA.FastaItem`1">
<summary>
 Fasta item contains header and sequence
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.toString``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.Collections.Generic.IEnumerable{BioFSharp.IO.FastA.FastaItem{``1}})">
<summary>
 Converts FastaItem to string. Converter determines type of sequence by converting type -&gt; seq&lt;char&gt;
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.write``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Char},System.String,System.Collections.Generic.IEnumerable{BioFSharp.IO.FastA.FastaItem{``1}})">
<summary>
 Writes FastaItem to file. Converter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.fromGzipFile``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.String)">
<summary>
 Reads FastaItem from gzFile. Converter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.fromFile``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.String)">
<summary>
 Reads FastaItem from file. Converter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.fromFileEnumerator``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Reads FastaItem from file. Converter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastA.createFastaItem``1(System.String,``0)">
<summary>
 Creates with header line and sequence.
</summary>
</member>
<member name="T:BioFSharp.IO.Mgf.MgfEntry">
<summary>
 Represents 
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.mgfToString(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Converts a MgfEntry to string.
 Use Seq.write to write to file. 
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.readMgf(System.String)">
<summary>
 Reads an mgf file into a collection of MgfEntries
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryParseTitle(System.String)">
<summary>
 Returns the retention time and precursor intensity from &apos;mgf-title&apos; string. Returns None if title does not contain the information
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryGetTitle(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Returns the title string of a &apos;mgf-entry&apos;. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryGetPrecursorCharges(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Returns the precursor mass. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryParseCharge(System.String)">
<summary>
 Returns the posible charge/charges in a list. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryGetPrecursorMZ(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Returns the precursor mz. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="M:BioFSharp.IO.Mgf.tryGetPrecursorMass(BioFSharp.IO.Mgf.MgfEntry)">
<summary>
 Returns the precursor mass. Returns None if the information can&apos;t be optained
</summary>
</member>
<member name="T:BioFSharp.IO.Mgf">
<summary>
 Mgf &lt;http://www.matrixscience.com/help/data_file_help.html&gt;`_ is a simple
 human-readable format for MS/MS data. It allows storing MS/MS peak lists and
 exprimental parameters.
</summary>
</member>
<member name="T:BioFSharp.IO.Obo.OboTerm">
<summary>
 obo term record type
</summary>
</member>
<member name="M:BioFSharp.IO.Obo.parseOboTerms(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Parse Obo Terms [Term] from seq&lt;string&gt;
</summary>
</member>
<member name="M:BioFSharp.IO.Obo.parseSingleOboTerm(System.Collections.Generic.IEnumerator{System.String},System.String,System.String,System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},System.String)">
<summary>
 Parses a [term] item in a recusive function
</summary>
</member>
<member name="M:BioFSharp.IO.Obo.createOboTerm(System.String,System.String,System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String},System.String)">
<summary>
 Creates an obo term record
</summary>
</member>
<member name="T:BioFSharp.IO.Obo">
<summary>
 Module to parse obo files to AdjacencyGraph
</summary>
</member>
<member name="T:BioFSharp.IO.FastQ.FastqItem`2">
<summary>
 FastqItem record contains header, sequence, qualityheader, qualitysequence of one entry
</summary>
</member>
<member name="M:BioFSharp.IO.FastQ.fromGzipFile``2(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.FSharpFunc{System.String,``1},System.String)">
<summary>
 Reads FastqItem from GZip format file. Converter and qualityConverter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastQ.fromFile``2(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.FSharpFunc{System.String,``1},System.String)">
<summary>
 Reads FastqItem from FastQ format file. Converter and qualityConverter determines type of sequence by converting seq&lt;char&gt; -&gt; type
</summary>
</member>
<member name="M:BioFSharp.IO.FastQ.fromFileEnumerator``2(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},Microsoft.FSharp.Core.FSharpFunc{System.String,``1},System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Maps each lines from an entry to FastqItem
</summary>
</member>
<member name="M:BioFSharp.IO.FastQ.createFastqItem``2(System.String,``0,System.String,``1)">
<summary>
 Creates FastqItem with header line, sequence, qualityHeader and qualitySequence
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3Parser.relationshipSearch``1(System.Collections.Generic.IEnumerable{BioFSharp.IO.GFF3Parser.GFF{``0}},System.String)">
<summary>
Searches for an term and gives a list of all features of which the searchterm is the mainfeature (ID) or a child of it (Parent) (shows all features which are linked to searchterm)
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3Parser.GFF3readerWithoutFasta(System.String)">
<summary>
If no information about Sequence is required or no Fasta is included you can use this function
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3Parser.GFF3reader``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.String)">
<summary>
reads in a file and gives a GFF&lt;&apos;a&gt; list. If file contains a FastA sequence it is converted to FastA.FastaItem with given converter. (Use &apos;id&apos; as converter if no FastA is required).
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3Parser.addFastaSequence``2(System.Collections.Generic.IEnumerator{System.String},Microsoft.FSharp.Collections.FSharpList{BioFSharp.IO.GFF3Parser.GFF{``0}},Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0})">
<summary>
If there is a ##FASTA directive, all subsequent lines are taken by this function, transformed to seq&lt;FastA.FastaItem&lt;&apos;a&gt;&gt; and added to the previous parsed GFF&lt;&apos;a&gt; list.
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3Parser.parseStrToGFFEntry(System.String)">
<summary>
Converts a string into a GFFEntry type. If there are more than 9 fields an additional &quot;supplement&quot; field gets filled. If there are less than 9 only the supplement field gets filled with the string.
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3Parser.createGFFEntry(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
<summary>
Gets strings of each field and creates a GFFEntry type thereby converting the strings into desired types.        
</summary>
</member>
<member name="M:BioFSharp.IO.GFF3Parser.innerTokenizer(System.String)">
<summary>
Separates every key-value pair of field &apos;attributes&apos; at &apos;;&apos;. Seperates key from value at &apos;=&apos; and separates values at &apos;,&apos;.
</summary>
</member>
<member name="T:BioFSharp.IO.Newick.Token">
<summary>
Type used by the lexer
</summary>
</member>
<member name="M:BioFSharp.IO.Newick.toFile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Tuple{System.String,System.String}},System.String,BioFSharp.PhylTree.Node{``0})">
<summary>
Creates a NewickTree file of PhylTree. nodeConverter is used to split the distanceInfo and the name of a node, because they are parsed separately. First result of the tuple is name, second is distance.
</summary>
</member>
<member name="M:BioFSharp.IO.Newick.ofFile``1(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},System.String)">
<summary>
Returns a PhylTree of file. Converter is used to create a distancevalue of a string
</summary>
</member>
<member name="M:BioFSharp.IO.Newick.parser``1(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},System.Collections.Generic.IEnumerable{BioFSharp.IO.Newick.Token})">
<summary>
Parses a seq of tokens to a PhylTree
</summary>
</member>
<member name="M:BioFSharp.IO.Newick.readFile(System.String)">
<summary>
Read file as sequence of characters
</summary>
</member>
<member name="T:BioFSharp.IO.Newick">
<summary>
Contains functions for parsing phylogenetic trees in the Newick format
</summary>
</member>
<member name="T:BioFSharp.IO.Clustal.Token">
<summary>
Tokens for lexer
</summary>
</member>
<member name="T:BioFSharp.IO.Clustal.NamedSequence">
<summary>
Sequence and its ID
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.hasClustalFileHeader(BioFSharp.Alignment.Alignment{BioFSharp.IO.Clustal.NamedSequence,BioFSharp.IO.Clustal.AlignmentInfo})">
<summary>
Checks if the header of a parsed clustal alignment matches the clustal file conventions
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.ofFile(System.String)">
<summary>
Reads clustal File (W or Omega) of given path and creates an alignment out of it. Also reads in numbers at end of line. Those have to be filtered out afterwards if not needed.
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.parser(System.Collections.Generic.IEnumerable{BioFSharp.IO.Clustal.Token})">
<summary>
Builds the alignment out of the Tokensequence
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.tokenizer(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
Feeds characters into lexer
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.lexer(BioFSharp.IO.Clustal.Token,System.Char,System.Boolean)">
<summary>
Evaluates what kind of information each character carries
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.readFile(System.String)">
<summary>
Reads file character by character
</summary>
</member>
<member name="M:BioFSharp.IO.Clustal.createNS(System.String,System.Collections.Generic.IEnumerable{System.Char})">
<summary>
creates NamedSequence of name and sequence
</summary>
</member>
<member name="T:BioFSharp.IO.Clustal">
<summary>
Contains functions for reading clustal alignment files
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1.Sequence">
<summary>
The origin section of a GenBank file
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1.Features">
<summary>
All features contained in a GenBank file as seperate entries in a list
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1.References">
<summary>
All references contained in a GenBank file is seperate entries in a list.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1.Value">
<summary>
Any value contained in the meta section of a GenBank file. 
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.GenBankItem`1">
<summary>
Represents any Item a GenBank file can contain as a union case. The result of parsing a genBank file will be a dictionary containing this type.
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.Feature.Qualifiers">
<summary>
A List of feature Qualifiers and their values associated with this feature
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.Feature.BaseSpan">
<summary>
Location of the feature in the sequence
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.Feature.Type">
<summary>
Type of the Feature
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Feature">
<summary>
Represents a single feature from the FEATURES section of a GenBank file. Features can contain
Information about genes and gene products, as well as regions of biological significance reported in the sequence
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.FeatureQualifier.Value">
<summary>
Value of the Feature
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.FeatureQualifier.Name">
<summary>
Key of the Feature
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.FeatureQualifier">
<summary>
Represents a single feature Qualifier and its value from the FEATURES section of a Genbank file. Features can contain
Information about genes and gene products, as well as regions of biological significance reported in the sequence
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.CurrentSection">
<summary>
Functions for reading a GenBank file
Represents the possible sections in a GenBank file
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.tryGetItem``1(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns a GenBank item at the specified key, if it exists in the dictionary
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getValues``1(System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns all Values of the meta section of a Genbank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getOrigin``1(System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns the Origin of a GenBank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getFeaturesWithType``1(System.String,System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns all features of a specific type of a GenBank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getFeatures``1(System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns all features of a GenBank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.getReferences``1(System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
Returns all references of a GenBank file representation
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.parseFeatureQualifier(System.String)">
<summary>
returns an key value pair for a feature from an input string. If the input string does not contain an &quot;=&quot; sign, the value belongs
to the previous line and the function EXPLAIN THIS LATER
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.featureRegexPattern2">
<summary>
Regular expression for parsing a feature key,value pair that contains no value from a string
</summary>
</member>
<member name="P:BioFSharp.IO.GenBank.featureRegexPattern">
<summary>
Regular expression for parsing a feature key,value pair from a string
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.arrayIteriYield``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])">
<summary>
Iterate over an array yielding the result of applying a function to each element in a sequence
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Write.write``1(System.String,Microsoft.FSharp.Core.FSharpFunc{``0,System.Collections.Generic.IEnumerable{System.Char}},System.Collections.Generic.Dictionary{System.String,BioFSharp.IO.GenBank.GenBankItem{``0}})">
<summary>
creates a GenBank file at the specified path, taking a converter function for the origin sequence of the file 
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Write.constructSeqs(System.String,System.String,System.Int32,System.Int32)">
<summary>
constructs a sequence of strings in the right formatting (including identation of the key and the position for splitting key/value in the file) 
from input key and value.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Write.OriginConverters.bioItemConverter``1(System.Collections.Generic.IEnumerable{``0})">
<summary>
converts the BioSeq to the 1 letter code representing the contained items
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Write.OriginConverters.defaultConverter(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
default converter. returns a sequence of characters
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Write.OriginConverters">
<summary>
contains a collection of prebuilt converters for writing specific origin sequences 
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Write">
<summary>
Functions for writing a GenBank file  
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token.Value">
<summary>
Represents the lines ranking lowest in hierarchy. These lines are idented and dont have a key. This union case indicates that the 
value contained belongs to the next highest ranking line in hierarchy.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token.Feature">
<summary>
Represents the lines ranking third in hierarchy. Features are only present in the features section of a GenBank file.
These lines are idented and dont have a key.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token.Member">
<summary>
Represents the lines ranking second in hierarchy. These lines are idented, but contain a key,value pair
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token.Section">
<summary>
Represents the lines ranking highest in hierarchy. These lines are not idented, and are parsed as key,value pair
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.Token">
<summary>
Token representing lines of a GenBank file for parsing purposes
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.fromSeq``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.Collections.Generic.IEnumerable{System.String})">
<summary>
Returns a dictionary containing GenBank items parsed from an input string sequence
taking a converter function for the origin sequence 
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.fromFile``1(System.String,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0})">
<summary>
Returns a dictionary containing GenBank items that represents the GenBank file at the input path
taking a converter function for the origin sequence of the file 
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.parser``1(Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{System.Char},``0},System.Collections.Generic.IEnumerable{System.Tuple{BioFSharp.IO.GenBank.CurrentSection,BioFSharp.IO.GenBank.Read.Token}})">
<summary>
Iterates over an input sequence of tokens and adds the corresponding GenBankItems to a dictionary. The returned dictionary represents a GenBank file.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.tokenizer(System.Collections.Generic.IEnumerable{System.String})">
<summary>
Iterates over an input sequence of strings and returns a sequence containing the corresponding token for each entry.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.lexer(BioFSharp.IO.GenBank.CurrentSection,System.String)">
<summary>
Assigns a string to its corresponding token type.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.getCurrentSection(BioFSharp.IO.GenBank.CurrentSection,System.String)">
<summary>
Returns a CurrentSection depending on an input key. Returns the input currentSection if the key does not indicate that the section changes.
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.isEmpty(System.String)">
<summary>
Retursn true if the input string is empty after being trimmed of whitespace, otherwise returns false
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.isIdent(System.String)">
<summary>
Returns true if the input string is idented, otherwise returns false
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.subStr(System.Int32,System.Int32,System.String)">
<summary>
Splits the input string at a specific position (pos) returns two substrings of it, one sarting at (start) and
ending at (pos), the other starting at (pos) and containing the rest of the string
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.OriginConverters.peptideConverter(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
converts the origin sequence into a BioSeq of amino acids
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.OriginConverters.nucleotideConverter(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
converts the origin sequence into a BioSeq of nucleotides
</summary>
</member>
<member name="M:BioFSharp.IO.GenBank.Read.OriginConverters.defaultConverter(System.Collections.Generic.IEnumerable{System.Char})">
<summary>
default converter that yields all characters of the origin sequence, skipping spaces.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read.OriginConverters">
<summary>
contains a collection of prebuilt converters for parsing specific origin sequences 
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank.Read">
<summary>
functions for parsing a GenBank file.
</summary>
</member>
<member name="T:BioFSharp.IO.GenBank">
<summary>
functions for reading and writing GenBank files
</summary>
</member>
</members>
</doc>
