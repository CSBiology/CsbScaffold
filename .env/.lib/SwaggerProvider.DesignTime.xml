<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>SwaggerProvider.DesignTime</name></assembly>
<members>
<member name="P:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.Namespaces">
<summary>
 Invoked by the type provider to get all provided namespaces with their provided types.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.ResolveAssembly(System.ResolveEventArgs)">
<summary>
 AssemblyResolve handler. Default implementation searches &lt;assemblyname&gt;.dll file in registered folders 
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.RegisterRuntimeAssemblyLocationAsProbingFolder(Microsoft.FSharp.Core.CompilerServices.TypeProviderConfig)">
<summary>
 Registers location of RuntimeAssembly (from TypeProviderConfig) as probing folder
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.RegisterProbingFolder(System.String)">
<summary>
 Registers custom probing path that can be used for probing assemblies
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.Invalidate">
<summary>
 Invoked by the type provider to invalidate the information provided by the provider
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.GetStaticParametersForMethod(System.Reflection.MethodBase)">
<summary>
 Invoked by the host of the type provider to get the static parameters for a method.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.ApplyStaticArgumentsForMethod(System.Reflection.MethodBase,System.String,System.Object[])">
<summary>
 Invoked by the host of the type provider to apply the static argumetns for a method.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.AddNamespace(System.String,Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition})">
<summary>
 Invoked by the type provider to add a namespace of provided types in the specification of the type provider.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.#ctor">
<summary>
 Initializes a type provider 
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces.#ctor(System.String,Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition})">
<summary>
 Initializes a type provider to provide the types in the given namespace.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.TypeProviderForNamespaces">
<summary>
 A base type providing default implementations of type provider functionality when all provided 
 types are of type ProvidedTypeDefinition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedAssembly.RegisterGenerated(System.String)">
<summary>
 Register that a given file is a provided generated assembly
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedAssembly.AddTypes(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition})">
<summary>
 Emit the given provided type definitions as part of the assembly 
 and adjust the &apos;Assembly&apos; property of all provided type definitions to return that
 assembly.

 The assembly is only emitted when the Assembly property on the root type is accessed for the first time.
 The host F# compiler does this when processing a generative type declaration for the type.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedAssembly.AddNestedTypes(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition},Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Emit the given nested provided type definitions as part of the assembly.
 and adjust the 'Assembly' property of all provided type definitions to return that
 assembly.
 </summary>
 <param name="enclosingTypeNames">A path of type names to wrap the generated types. The generated types are then generated as nested types.</param>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedAssembly.#ctor(System.String)">
<summary>
 Create a provided generated assembly
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedAssembly">
<summary>
 A provided generated assembly
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SuppressRelocation(System.Boolean)">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition has type-relocation suppressed
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.NonNullable(System.Boolean)">
<summary>
 Disallows the use of the null literal. 
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.IsErased(System.Boolean)">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition is erased
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.HideObjectMethods(System.Boolean)">
<summary>
 Suppress Object entries in intellisense menus in instances of this provided type 
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SuppressRelocation">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition has type-relocation suppressed
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.Logger">
<summary>
 Get or set a utility function to log the creation of root Provided Type. Used to debug caching/invalidation.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.IsErased">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition is erased
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SetEnumUnderlyingType(System.Type)">
<summary>
 Set underlying type for generated enums
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SetBaseTypeDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Type})">
<summary>
 Set the base type to a lazily evaluated value. Use this to delay realization of the base type as late as possible.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SetBaseType(System.Type)">
<summary>
 Set the base type
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.SetAttributes(System.Reflection.TypeAttributes)">
<summary>
 Set the attributes on the provided type. This fully replaces the default TypeAttributes.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.ResetEnclosingType(System.Type)">
<summary>
 Reset the enclosing type (for generated nested types)
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.EraseType(System.Type)">
<summary>
 Emulate the F# type provider type erasure mechanism to get the 
 actual (erased) type. We erase ProvidedTypes to their base type
 and we erase array of provided type to array of base type. In the
 case of generics all the generic type arguments are also recursively
 replaced with the erased-to types
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.DefineStaticParameters(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedStaticParameter},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition}})">
<summary>
 Define the static parameters available on a statically parameterized type
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.DefineMethodOverride(ProviderImplementation.ProvidedTypes.ProvidedMethod,System.Reflection.MethodInfo)">
<summary>
 Specifies that the given method body implements the given method declaration.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary.
 The documentation is only computed once.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided type definition
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddMembersDelayed``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{``0}})">
<summary>
 Add a set of members to a ProvidedTypeDefinition, delaying computation of the members until required by the compilation context.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddMembers``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Add a set of members to a ProvidedTypeDefinition
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddMemberDelayed``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Add a member to a ProvidedTypeDefinition, delaying computation of the members until required by the compilation context.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddMember(System.Reflection.MemberInfo)">
<summary>
 Add a method, property, nested type or other member to a ProvidedTypeDefinition
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddInterfaceImplementationsDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{System.Type}})">
<summary>
 Add the given function as a set of on-demand computed interfaces.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddInterfaceImplementation(System.Type)">
<summary>
 Add the given type as an implemented interface.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddCustomAttribute(System.Reflection.CustomAttributeData)">
<summary>
 Add a custom attribute to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.AddAssemblyTypesAsNestedTypesDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Reflection.Assembly})">
<summary>
 Add the types of the generated assembly as generative types, where types in namespaces get hierarchically positioned as nested types.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.#ctor(System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Create a new provided type definition, to be located as a nested type in some type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition.#ctor(System.Reflection.Assembly,System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Create a new provided type definition in a namespace. 
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition">
<summary>
 Represents a provided type definition.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.One">
<summary>
 Gets the measure indicating the &quot;1&quot; unit of measure, that is the unitless measure. 
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Default">
<summary>
 The ProvidedMeasureBuilder for building measures.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Square(System.Type)">
<summary>
 Returns the measure indicating the square of a unit of measure, e.g. m * m
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.SI(System.String)">
<summary>
 Returns the measure for an SI unit from the F# core library, where the string is in capitals and US spelling, e.g. Meter
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Ratio(System.Type,System.Type)">
<summary>
 Returns the measure indicating the ratio of two units of measure, e.g. kg / m
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Product(System.Type,System.Type)">
<summary>
 Returns the measure indicating the product of two units of measure, e.g. kg * m
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.Inverse(System.Type)">
<summary>
 Returns the measure indicating the inverse of two units of measure, e.g. 1 / s
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder.AnnotateType(System.Type,Microsoft.FSharp.Collections.FSharpList{System.Type})">
<summary>
 Returns a type where the type has been annotated with the given types and/or units-of-measure.
 e.g. float&lt;kg&gt;, Vector&lt;int, kg&gt;
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedMeasureBuilder">
<summary>
 Helps create erased provided unit-of-measure annotations.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ZProvidedTypeBuilder">
<summary>
 Used internally for ProvidedTypesContext
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeBuilder.MakeGenericType(System.Type,Microsoft.FSharp.Collections.FSharpList{System.Type})">
<summary>
 Like typ.MakeGenericType, but will also work with unit-annotated types
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedTypeBuilder.MakeGenericMethod(System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList{System.Type})">
<summary>
 Like methodInfo.MakeGenericMethod, but will also work with unit-annotated types and provided types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedTypeBuilder">
<summary>
 Helpers to build symbolic provided types
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedSymbolType.Kind">
<summary>
 Returns the kind of this symbolic type
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedSymbolType.IsFSharpUnitAnnotated">
<summary>
 For example, int&lt;kg&gt; or int&lt;kilogram&gt;
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedSymbolType.IsFSharpTypeAbbreviation">
<summary>
 For example, kg
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedSymbolType.Args">
<summary>
 Return the provided types used as arguments of this symbolic type
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolType">
<summary>
 Represents an array or other symbolic type involving a provided type as the argument.
 See the type provider spec for the methods that must be implemented.
 Note that the type provider specification does not require us to implement pointer-equality for provided types.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.FSharpTypeAbbreviation">
<summary>
 Indicates that the type constructor is for abbreviated types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.Generic">
<summary>
 Indicates that the type constructor is for named generic types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.ByRef">
<summary>
 Indicates that the type constructor is for byref types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.Pointer">
<summary>
 Indicates that the type constructor is for pointer types
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.Array">
<summary>
 Indicates that the type constructor is for a multi-dimensional array
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind.SDArray">
<summary>
 Indicates that the type constructor is for a single-dimensional array
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedSymbolKind">
<summary>
 Represents the type constructor in a provided symbol type.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided field
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided field
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided field definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedField.#ctor(System.String,System.Type)">
<summary>
 Create a new provided field. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedField">
<summary>
 Represents an erased provided field.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided field, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided field
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided field
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided field.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedLiteralField.#ctor(System.String,System.Type,System.Object)">
<summary>
 Create a new provided field. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedLiteralField">
<summary>
 Represents an erased provided field.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedEvent.RemoverCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of sets of this property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedEvent.IsStatic(System.Boolean)">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedEvent.AdderCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of gets of this property.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedEvent.#ctor(System.String,System.Type)">
<summary>
 Create a new provided type. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedEvent">
<summary>
 Represents an erased provided property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedProperty.SetterCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of sets of this property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedProperty.IsStatic(System.Boolean)">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedProperty.GetterCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of gets of this property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedProperty.IsStatic">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided property
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.AddCustomAttribute(System.Reflection.CustomAttributeData)">
<summary>
 Add a custom attribute to the provided property definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedProperty.#ctor(System.String,System.Type,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedParameter}})">
<summary>
 Create a new provided property. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedProperty">
<summary>
 Represents an erased provided property.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMethod.IsStaticMethod(System.Boolean)">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMethod.InvokeCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of invocations of this method.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedMethod.IsStaticMethod">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.SetMethodAttrs(System.Reflection.MethodAttributes)">
<summary>
 Set the method attributes of the method. By default these are simple &apos;MethodAttributes.Public&apos;
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.DefineStaticParameters(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedStaticParameter},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Object[],ProviderImplementation.ProvidedTypes.ProvidedMethod}})">
<summary>
 Define the static parameters available on a statically parameterized method
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add XML documentation information to this provided method
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.AddCustomAttribute(System.Reflection.CustomAttributeData)">
<summary>
 Add a custom attribute to the provided method definition.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedMethod.#ctor(System.String,Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedParameter},System.Type)">
<summary>
 Create a new provided method. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedConstructor.IsImplicitCtor(System.Boolean)">
<summary>
 Set a flag indicating that the constructor acts like an F# implicit constructor, so the
 parameters of the constructor become fields and can be accessed using Expr.GlobalVar with the
 same name.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedConstructor.InvokeCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedConstructor.BaseConstructorCall(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},System.Tuple{System.Reflection.ConstructorInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}}})">
<summary>
 Set the target and arguments of the base constructor call. Only used for generated types.
</summary>
</member>
<member name="P:ProviderImplementation.ProvidedTypes.ProvidedConstructor.IsImplicitCtor">
<summary>
 Set a flag indicating that the constructor acts like an F# implicit constructor, so the
 parameters of the constructor become fields and can be accessed using Expr.GlobalVar with the
 same name.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.GetInvokeCodeInternal(System.Boolean)">
<summary>
 This method is used by Debug.fs
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddObsoleteAttribute(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Add a &apos;Obsolete&apos; attribute to this provided constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided constructor.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedConstructor.#ctor(Microsoft.FSharp.Collections.FSharpList{ProviderImplementation.ProvidedTypes.ProvidedParameter})">
<summary>
 Create a new provided constructor. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedConstructor">
<summary>
 Represents an erased provided constructor.
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedStaticParameter.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypes.ProvidedStaticParameter.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedStaticParameter">
<summary>
 Represents a provided static parameter.
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypes.ProvidedParameter">
<summary>
 Represents an erased provided parameter
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypesTesting.Testing.MakeSimulatedTypeProviderConfig(System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Simulates a real instance of TypeProviderConfig 
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypesTesting.Testing.GenerateProvidedTypeInstantiation``1(System.String,System.String,Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.CompilerServices.TypeProviderConfig,``0},System.Object[])">
<summary>
 Simulates a real instance of TypeProviderConfig and then creates an instance of the last
 type provider added to a namespace by the type provider constructor
</summary>
</member>
<member name="M:ProviderImplementation.ProvidedTypesTesting.Testing.FormatProvidedType(ProviderImplementation.ProvidedTypes.ProvidedTypeDefinition,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Returns a string representation of the signature (and optionally also the body) of all the
 types generated by the type provider up to a certain depth and width
 If ignoreOutput is true, this will still visit the full graph, but it will output an empty string to be faster
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypesTesting.TcImports">
<summary>
 Simulate a real host of TypeProviderConfig 
</summary>
</member>
<member name="T:ProviderImplementation.ProvidedTypesTesting.DllInfo">
<summary>
 Simulate a real host of TypeProviderConfig 
</summary>
</member>
<member name="M:FSharp.Data.Http.RequestString(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Data.HttpRequestBody},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Net.HttpWebRequest,System.Net.HttpWebRequest}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Download an HTTP web resource from the specified URL synchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Data.Http.RequestStream(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Data.HttpRequestBody},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Net.HttpWebRequest,System.Net.HttpWebRequest}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Download an HTTP web resource from the specified URL synchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Data.Http.Request(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Data.HttpRequestBody},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Net.HttpWebRequest,System.Net.HttpWebRequest}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Download an HTTP web resource from the specified URL synchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Data.Http.AsyncRequestString(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Data.HttpRequestBody},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Net.HttpWebRequest,System.Net.HttpWebRequest}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Download an HTTP web resource from the specified URL asynchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Data.Http.AsyncRequestStream(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Data.HttpRequestBody},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Net.HttpWebRequest,System.Net.HttpWebRequest}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Download an HTTP web resource from the specified URL synchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Data.Http.AsyncRequest(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Data.HttpRequestBody},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Net.HttpWebRequest,System.Net.HttpWebRequest}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Download an HTTP web resource from the specified URL asynchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Data.Http.AppendQueryToUrl(System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}})">
<summary>
 Appends the query parameters to the url, taking care of proper escaping
</summary>
</member>
<member name="T:FSharp.Data.Http">
<summary>
 Utilities for working with network via HTTP. Includes methods for downloading 
 resources with specified headers, query parameters and HTTP body
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseWithStream.Headers">
<summary>
 If the same header is present multiple times, the values will be concatenated with comma as the separator
</summary>
</member>
<member name="T:FSharp.Data.HttpResponseWithStream">
<summary>
 The response returned by an HTTP request with direct access to the response stream
</summary>
</member>
<member name="P:FSharp.Data.HttpResponse.Headers">
<summary>
 If the same header is present multiple times, the values will be concatenated with comma as the separator
</summary>
</member>
<member name="T:FSharp.Data.HttpResponse">
<summary>
 The response returned by an HTTP request
</summary>
</member>
<member name="T:FSharp.Data.HttpResponseBody">
<summary>
 The response body returned by an HTTP request
</summary>
</member>
<member name="T:FSharp.Data.HttpRequestBody">
<summary>
 The body to send in an HTTP request
</summary>
</member>
<member name="F:FSharp.Data.TextConversions.DefaultCurrencyAdorners@">
<summary>
 `¤` `$` `¢` `£` `¥` `₱` `﷼` `₤` `₭` `₦` `₨` `₩` `₮` `€` `฿` `₡` `៛` `؋` `₴` `₪` `₫` `₹` `ƒ`
</summary>
</member>
<member name="F:FSharp.Data.TextConversions.DefaultNonCurrencyAdorners@">
<summary>
 `%` `‰` `‱`
</summary>
</member>
<member name="F:FSharp.Data.TextConversions.DefaultMissingValues@">
<summary>
 `NaN` `NA` `N/A` `#N/A` `:` `-` `TBA` `TBD`
</summary>
</member>
<member name="P:FSharp.Data.TextConversions.DefaultNonCurrencyAdorners">
<summary>
 `%` `‰` `‱`
</summary>
</member>
<member name="P:FSharp.Data.TextConversions.DefaultMissingValues">
<summary>
 `NaN` `NA` `N/A` `#N/A` `:` `-` `TBA` `TBD`
</summary>
</member>
<member name="P:FSharp.Data.TextConversions.DefaultCurrencyAdorners">
<summary>
 `¤` `$` `¢` `£` `¥` `₱` `﷼` `₤` `₭` `₦` `₨` `₩` `₮` `€` `฿` `₡` `៛` `؋` `₴` `₪` `₫` `₹` `ƒ`
</summary>
</member>
<member name="M:FSharp.Data.TextConversions.AsString(System.String)">
<summary>
 Turns empty or null string value into None, otherwise returns Some
</summary>
</member>
<member name="M:FSharp.Data.TextConversions.AsFloat(System.String[],System.Boolean,System.IFormatProvider,System.String)">
<summary>
 if useNoneForMissingValues is true, NAs are returned as None, otherwise Some Double.NaN is used
</summary>
</member>
<member name="M:FSharp.Data.TextConversions.AsDateTime(System.IFormatProvider,System.String)">
<summary>
 Parse date time using either the JSON milliseconds format or using ISO 8601
 that is, either `/Date(&lt;msec-since-1/1/1970&gt;)/` or something
 along the lines of `2013-01-28T00:37Z`
</summary>
</member>
<member name="T:FSharp.Data.TextConversions">
<summary>
 Conversions from string to string/int/int64/decimal/float/boolean/datetime/guid options
</summary>
</member>
<member name="P:FSharp.Data.JsonValue._Print">
<summary>
 [omit]
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.WriteTo(System.IO.TextWriter,FSharp.Data.JsonSaveOptions)">
<summary>
 Serializes the JsonValue to the specified System.IO.TextWriter.
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.RequestAsync(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}})">
<summary>
 Sends the JSON to the specified uri. Defaults to a POST request.
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.Request(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}})">
<summary>
 Sends the JSON to the specified uri. Defaults to a POST request.
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.ParseSample(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Parses the specified JSON string, tolerating invalid errors like trailing commans, and ignore content with elipsis ... or {...}
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.ParseMultiple(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Parses the specified string into multiple JSON values
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.Parse(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Parses the specified JSON string
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.Load(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified uri
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.Load(System.IO.TextReader,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified reader
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.Load(System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified stream
</summary>
</member>
<member name="M:FSharp.Data.JsonValue.AsyncLoad(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified uri asynchronously
</summary>
</member>
<member name="T:FSharp.Data.JsonValue">
<summary>
 Represents a JSON value. Large numbers that do not fit in the
 Decimal type are represented using the Float case, while
 smaller numbers are represented as decimals to avoid precision loss.
</summary>
</member>
<member name="F:FSharp.Data.JsonSaveOptions.DisableFormatting">
<summary>
 Print the JsonValue in one line in a compact way
</summary>
</member>
<member name="F:FSharp.Data.JsonSaveOptions.None">
<summary>
 Format (indent) the JsonValue
</summary>
</member>
<member name="T:FSharp.Data.JsonSaveOptions">
<summary>
 Specifies the formatting behaviour of JSON values
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.TryGetProperty(FSharp.Data.JsonValue,System.String)">
<summary>
 Try to get a property of a JSON value.
 Returns None if the value is not an object or if the property is not present.
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.Properties(FSharp.Data.JsonValue)">
<summary>
 Get a sequence of key-value pairs representing the properties of an object
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.Item(FSharp.Data.JsonValue,System.Int32)">
<summary>
 Try to get the value at the specified index, if the value is a JSON array.
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.Item(FSharp.Data.JsonValue,System.String)">
<summary>
 Assuming the value is an object, get value with the specified name
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.InnerText(FSharp.Data.JsonValue)">
<summary>
 Get inner text of an element
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.GetProperty(FSharp.Data.JsonValue,System.String)">
<summary>
 Get property of a JSON object. Fails if the value is not an object
 or if the property is not present
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.GetEnumerator(FSharp.Data.JsonValue)">
<summary>
 Get all the elements of a JSON value (assuming that the value is an array)
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsString(FSharp.Data.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get the string value of an element (assuming that the value is a scalar)
 Returns the empty string for JsonValue.Null
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsInteger64(FSharp.Data.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as a 64-bit integer (assuming that the value fits in 64-bit integer)
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsInteger(FSharp.Data.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as an integer (assuming that the value fits in integer)
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsGuid(FSharp.Data.JsonValue)">
<summary>
 Get the guid value of an element (assuming that the value is a guid)
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsFloat(FSharp.Data.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo},Microsoft.FSharp.Core.FSharpOption{System.String[]})">
<summary>
 Get a number as a float (assuming that the value is convertible to a float)
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsDecimal(FSharp.Data.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as a decimal (assuming that the value fits in decimal)
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsDateTime(FSharp.Data.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get the datetime value of an element (assuming that the value is a string
 containing well-formed ISO date or MSFT JSON date)
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsBoolean(FSharp.Data.JsonValue)">
<summary>
 Get the boolean value of an element (assuming that the value is a boolean)
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensions.AsArray(FSharp.Data.JsonValue)">
<summary>
 Get all the elements of a JSON value.
 Returns an empty array if the value is not a JSON array.
</summary>
</member>
<member name="T:FSharp.Data.JsonExtensions">
<summary>
 Extension methods with operations on JSON values
</summary>
</member>
<member name="T:FSharp.Data.HttpHelpers.WebResponse">
<summary>
 Decorator for System.Net.WebResponse class
 used to make response stream seekable 
 in order to preserve it in the new response
</summary>
</member>
<member name="M:FSharp.Data.HttpHelpers.asyncRead(System.IO.Stream)">
<summary>
 consumes a stream asynchronously until the end
 and returns a memory stream with the full content
</summary>
</member>
<member name="P:FSharp.Data.HttpEncodings.ResponseDefaultEncoding">
<summary>
 ISO-8859-1
</summary>
</member>
<member name="P:FSharp.Data.HttpEncodings.PostDefaultEncoding">
<summary>
 ISO-8859-1
</summary>
</member>
<member name="T:FSharp.Data.HttpEncodings">
<summary>
 Constants for common HTTP encodings
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Csv">
<summary>
 text/csv
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Soap">
<summary>
 application/soap+xml
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.XHtml">
<summary>
 application/xhtml+xml
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Html">
<summary>
 text/html
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Rdf">
<summary>
 application/rdf+xml
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Atom">
<summary>
 application/atom+xml
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Rss">
<summary>
 application/rss+xml
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Xml">
<summary>
 application/xml
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.JavaScript">
<summary>
 application/javascript
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Json">
<summary>
 application/json
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.FormValues">
<summary>
 application/x-www-form-urlencoded
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.GZip">
<summary>
 application/octet-stream
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Zip">
<summary>
 application/octet-stream
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Binary">
<summary>
 application/octet-stream
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Text">
<summary>
 plain/text
</summary>
</member>
<member name="P:FSharp.Data.HttpContentTypes.Any">
<summary>
 */*
</summary>
</member>
<member name="T:FSharp.Data.HttpContentTypes">
<summary>
 Constants for common HTTP content types
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.WWWAuthenticate">
<summary>
 Indicates the authentication scheme that should be used to access the requested entity.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Warning">
<summary>
 A general warning about possible problems with the entity body.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Via">
<summary>
 Informs the client of proxies through which the response was sent. 
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Vary">
<summary>
 Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.TransferEncoding">
<summary>
 The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Trailer">
<summary>
 The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer-coding.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.StrictTransportSecurity">
<summary>
 A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Status">
<summary>
 The HTTP status of the response
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.SetCookie">
<summary>
 An HTTP cookie
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Server">
<summary>
 A name for the server
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.RetryAfter">
<summary>
 If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date.[28]
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Refresh">
<summary>
 Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ProxyAuthenticate">
<summary>
 Request authentication to access the proxy.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Pragma">
<summary>
 Implementation-specific headers that may have various effects anywhere along the request-response chain.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.P3P">
<summary>
 This header is supposed to set P3P policy
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Location">
<summary>
 Used in redirection, or when a new resource has been created.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Link">
<summary>
 Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.LastModified">
<summary>
 The last modified date for the requested object 
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Expires">
<summary>
 Gives the date/time after which the response is considered stale
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ETag">
<summary>
 An identifier for a specific version of a resource, often a message digest
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Date">
<summary>
 The date and time that the message was sent (in &quot;HTTP-date&quot; format as defined by RFC 2616)
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ContentType">
<summary>
 The MIME type of this content
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ContentRange">
<summary>
 Where in a full body message this partial message belongs
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ContentDisposition">
<summary>
 An opportunity to raise a &quot;File Download&quot; dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ContentMD5">
<summary>
 A Base64-encoded binary MD5 sum of the content of the response
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ContentLocation">
<summary>
 An alternate location for the returned data
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ContentLength">
<summary>
 The length of the response body in octets (8-bit bytes)
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ContentLanguage">
<summary>
 The language the content is in
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.ContentEncoding">
<summary>
 The type of encoding used on the data. See HTTP compression.
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Connection">
<summary>
 Options that are desired for the connection
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.CacheControl">
<summary>
 Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Allow">
<summary>
 Valid actions for a specified resource. To be used for a 405 Method not allowed
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.Age">
<summary>
 The age the object has been in a proxy cache in seconds
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.AcceptRanges">
<summary>
 What partial content range types this server supports
</summary>
</member>
<member name="P:FSharp.Data.HttpResponseHeaders.AccessControlAllowOrigin">
<summary>
 Specifying which web sites can participate in cross-origin resource sharing
</summary>
</member>
<member name="T:FSharp.Data.HttpResponseHeaders">
<summary>
 Headers that can be received in an HTTP response
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.XHTTPMethodOverride(System.String)">
<summary>
 Override HTTP method. 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Warning(System.String)">
<summary>
 A general warning about possible problems with the entity body
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Via(System.String)">
<summary>
 Informs the server of proxies through which the request was sent
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.UserAgent(System.String)">
<summary>
 The user agent string of the user agent
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Upgrade(System.String)">
<summary>
 Specifies additional communications protocols that the client supports.
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Translate(System.String)">
<summary>
 Microsoft extension to the HTTP specification used in conjunction with WebDAV functionality.
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Trailer(System.String)">
<summary>
 The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer-coding
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.TE(System.String)">
<summary>
 The transfer encodings the user agent is willing to accept: the same values as for the response header 
 Transfer-Encoding can be used, plus the &quot;trailers&quot; value (related to the &quot;chunked&quot; transfer method) to 
 notify the server it expects to receive additional headers (the trailers) after the last, zero-sized, chunk.
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Referer(System.String)">
<summary>
 This is the address of the previous web page from which a link to the currently requested page was followed. (The word &quot;referrer&quot; is misspelled in the RFC as well as in most implementations.) 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Range(System.Int64,System.Int64)">
<summary>
 Request only part of an entity. Bytes are numbered from 0
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.ProxyAuthorization(System.String)">
<summary>
 Authorization credentials for connecting to a proxy. 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Pragma(System.String)">
<summary>
 Implementation-specific headers that may have various effects anywhere along the request-response chain.
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Origin(System.String)">
<summary>
 Initiates a request for cross-origin resource sharing (asks server for an &apos;Access-Control-Allow-Origin&apos; response header)
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.MaxForwards(System.Int32)">
<summary>
 Limit the number of times the message can be forwarded through proxies or gateways
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.LastModified(System.DateTime)">
<summary>
 Specifies the date and time at which the accompanying body data was last modified
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.KeepAlive(System.String)">
<summary>
 Specifies a parameter used into order to maintain a persistent connection
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.IfUnmodifiedSince(System.DateTime)">
<summary>
 Only send the response if the entity has not been modified since a specific time
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.IfRange(System.String)">
<summary>
 If the entity is unchanged, send me the part(s) that I am missing; otherwise, send me the entire new entity
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.IfNoneMatch(System.String)">
<summary>
 Allows a 304 Not Modified to be returned if content is unchanged
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.IfModifiedSince(System.DateTime)">
<summary>
 Allows a 304 Not Modified to be returned if content is unchanged 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.IfMatch(System.String)">
<summary>
 Only perform the action if the client supplied entity matches the same entity on the server. 
 This is mainly for methods like PUT to only update a resource if it has not been modified since the user last updated it. If-Match: &quot;737060cd8c284d8af7ad3082f209582d&quot; Permanent 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Host(System.String)">
<summary>
 The domain name of the server (for virtual hosting), and the TCP port number on which the server is listening. 
 The port number may be omitted if the port is the standard port for the service requested.
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.From(System.String)">
<summary>
 The email address of the user making the request 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Expires(System.DateTime)">
<summary>
 Gives the date/time after which the response is considered stale
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Expect(System.String)">
<summary>
 Indicates that particular server behaviors are required by the client
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Date(System.DateTime)">
<summary>
 The date and time that the message was sent
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.ContentType(System.String)">
<summary>
 The MIME type of the body of the request (used with POST and PUT requests)
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.ContentRange(System.String)">
<summary>
 Where in a full body message this partial message belongs
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.ContentMD5(System.String)">
<summary>
 A Base64-encoded binary MD5 sum of the content of the request body
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.ContentLocation(System.String)">
<summary>
 An alternate location for the returned data
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.ContentLanguage(System.String)">
<summary>
 The language the content is in
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.ContentEncoding(System.String)">
<summary>
 The type of encoding used on the data
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Connection(System.String)">
<summary>
 What type of connection the user-agent would prefer 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.CacheControl(System.String)">
<summary>
 Used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.BasicAuth(System.String,System.String)">
<summary>
 Authentication header using Basic Auth encoding
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Authorization(System.String)">
<summary>
 Authentication credentials for HTTP authentication
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Allow(System.String)">
<summary>
 The Allow header, which specifies the set of HTTP methods supported.
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.AcceptLanguage(System.String)">
<summary>
 List of acceptable human languages for response 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.AcceptEncoding(System.String)">
<summary>
 List of acceptable encodings. See HTTP compression.
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.AcceptDatetime(System.DateTime)">
<summary>
 Acceptable version in time 
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.AcceptCharset(System.String)">
<summary>
 Character sets that are acceptable
</summary>
</member>
<member name="M:FSharp.Data.HttpRequestHeaders.Accept(System.String)">
<summary>
 Content-Types that are acceptable for the response
</summary>
</member>
<member name="T:FSharp.Data.HttpRequestHeaders">
<summary>
 Headers that can be sent in an HTTP request
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Patch">
<summary>
 Requests that the origin server applies partial modifications contained in the entity enclosed in the request to the resource identified by the request URI
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Unlock">
<summary>
 Removes the lock identified by the lock token from the request URI, and all other resources included in the lock
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Lock">
<summary>
 Used to take out a lock of any access type on the resource identified by the request URI.
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Move">
<summary>
 Logical equivalent of a copy, followed by consistency maintenance processing, followed by a delete of the source where all three actions are performed atomically
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Copy">
<summary>
 Creates a duplicate of the source resource, identified by the Request-URI, in the destination resource, identified by the URI in the Destination header
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.MkCol">
<summary>
 Creates a new collection resource at the location specified by the Request URI
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.PropPatch">
<summary>
 Processes instructions specified in the request body to set and/or remove properties defined on the resource identified by the request URI
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.PropFind">
<summary>
 Retrieves properties defined on the resource identified by the request URI
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Connect">
<summary>
 Reserved for use with a proxy that can dynamically switch to being a tunnel 
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Trace">
<summary>
 Used to invoke a remote, application-layer loop- back of the request message
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Delete">
<summary>
 Requests that the origin server deletes the resource identified by the Request-URI
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Put">
<summary>
 Requests that the enclosed entity be stored under the supplied Request-URI
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Post">
<summary>
 Requests that the server accepts the entity enclosed in the request as a 
 new subordinate of the resource identified by the Request-URI in the Request-Line
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Head">
<summary>
 Identical to GET except that the server MUST NOT return a message-body in the response
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Get">
<summary>
 Retrieve whatever information (in the form of an entity) is identified by the URI
</summary>
</member>
<member name="P:FSharp.Data.HttpMethod.Options">
<summary>
 Request information about the communication options available on the request/response chain identified by the URI
</summary>
</member>
<member name="T:FSharp.Data.HttpMethod">
<summary>
 The method to use in an HTTP request
</summary>
</member>
<member name="M:FSharp.Data.Helpers.asOption``1(System.Boolean,``0)">
<summary>
 Convert the result of TryParse to option type
</summary>
</member>
<member name="P:FSharp.Data.JsonValueModule.Object">
<summary>
 Constructor to create a `JsonValue.Record of (string * JsonValue)[]` as a `JsonValue.Object of Map&lt;string, JsonValue&gt;` for
 backwards compatibility reaons
</summary>
</member>
<member name="M:FSharp.Data.JsonValueModule.|Object|_|(FSharp.Data.JsonValue)">
<summary>
 Active Pattern to view a `JsonValue.Record of (string * JsonValue)[]` as a `JsonValue.Object of Map&lt;string, JsonValue&gt;` for
 backwards compatibility reaons
</summary>
</member>
<member name="T:FSharp.Data.JsonValueModule">
<summary>
 [omit]
</summary>
</member>
<member name="T:FSharp.Data.Runtime.JsonConversions">
<summary>
 Conversions from JsonValue to string/int/int64/decimal/float/boolean/datetime/guid options
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.UriResolver.Resolve(System.Uri)">
<summary>
 Resolve the absolute location of a file (or web URL) according to the rules
 used by standard F# type providers as described here:
 https://github.com/fsharp/fsharpx/issues/195#issuecomment-12141785

  * if it is web resource, just return it
  * if it is full path, just return it
  * otherwise.

    At design-time:
      * if the user specified resolution folder, use that
      * otherwise use the default resolution folder
    At run-time:
      * if the user specified resolution folder, use that
      * if it is running in F# interactive (config.IsHostedExecution) 
        use the default resolution folder
      * otherwise, use &apos;CurrentDomain.BaseDirectory&apos;
 returns an absolute uri * isWeb flag
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.asyncReadTextAtRuntimeWithDesignTimeRules(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Returns a TextReader for the uri using the designtime resolution rules
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.asyncReadTextAtRuntime(System.Boolean,System.String,System.String,System.String,System.String,System.String)">
<summary>
 Returns a TextReader for the uri using the runtime resolution rules
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.asyncRead(Microsoft.FSharp.Core.FSharpOption{System.Tuple{FSharp.Data.Runtime.IO.IDisposableTypeProvider,System.String}},FSharp.Data.Runtime.IO.UriResolver,System.String,System.String,System.Uri)">
<summary>
 Opens a stream to the uri using the uriResolver resolution rules
 It the uri is a file, uses shared read, so it works when the file locked by Excel or similar tools,
 and sets up a filesystem watcher that calls the invalidate function whenever the file changes
</summary>
</member>
<member name="T:FSharp.Data.Runtime.IO">
<summary>
 Helper functions called from the generated code for working with files
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.singularize(System.String)">
<summary>
 Return the singular of an English word
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.pluralize(System.String)">
<summary>
 Return the plural of an English word
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.trimHtml(System.String)">
<summary>
 Trim HTML tags from a given string and replace all of them with spaces
 Multiple tags are replaced with just a single space. (This is a recursive 
 implementation that is somewhat faster than regular expression.)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.uniqueGenerator``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.String})">
<summary>
 Given a function to format names (such as `niceCamelName` or `nicePascalName`)
 returns a name generator that never returns duplicate name (by appending an
 index to already used names)
 
 This function is curried and should be used with partial function application:

     let makeUnique = uniqueGenerator nicePascalName
     let n1 = makeUnique &quot;sample-name&quot;
     let n2 = makeUnique &quot;sample-name&quot;

</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.niceCamelName(System.String)">
<summary>
 Turns a given non-empty string into a nice &apos;camelCase&apos; identifier
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.nicePascalName(System.String)">
<summary>
 Turns a given non-empty string into a nice &apos;PascalCase&apos; identifier
</summary>
</member>
<member name="T:FSharp.Data.Runtime.NameUtils">
<summary>
 Tools for generating nice member names that follow F# &amp; .NET naming conventions
</summary>
</member>
<member name="M:FSharp.Data.JsonExtensionsModule.op_Dynamic(FSharp.Data.JsonValue,System.String)">
<summary>
 Get a property of a JSON object  
</summary>
</member>
<member name="T:FSharp.Data.JsonExtensionsModule">
<summary>
 Provides the dynamic operator for getting a property of a JSON object
</summary>
</member>
<member name="T:SwaggerProvider.SwaggerTypeProvider">
<summary>
 The Swagger Type Provider.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.SwaggerObject.Tags">
<summary>
 A list of tags used by the specification with additional metadata.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.SwaggerObject.Definitions">
<summary>
 An object to hold data types produced and consumed by operations.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.SwaggerObject.Paths">
<summary>
 Required. A list of all operations.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.SwaggerObject.Schemes">
<summary>
 The transfer protocol of the API. Values MUST be from the list: &quot;http&quot;, &quot;https&quot;, &quot;ws&quot;, &quot;wss&quot;. (Only the first element of the list will be used)
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.SwaggerObject.BasePath">
<summary>
 The base path on which the API is served, which is relative to the host.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.SwaggerObject.Host">
<summary>
 The host (name or ip) serving the API.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.SwaggerObject.Info">
<summary>
 Required. Provides metadata about the API.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SwaggerObject">
<summary>
 This is the main object.
 http://swagger.io/specification/#swaggerObject
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.TagObject.Description">
<summary>
 A short description for the tag.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.TagObject.Name">
<summary>
 Required. The name of the tag.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.TagObject">
<summary>
 Allows adding meta data to a single tag.
 http://swagger.io/specification/#tagObject
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.InfoObject.Version">
<summary>
 Required. Provides the version of the application API (not to be confused with the specification version).
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.InfoObject.Description">
<summary>
 A short description of the application.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.InfoObject.Title">
<summary>
 Required. The title of the application.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.InfoObject">
<summary>
 Basic swagger information, relevant to the type provider.
 http://swagger.io/specification/#infoObject
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Deprecated">
<summary>
 Declares this operation to be deprecated.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Parameters">
<summary>
 A list of parameters that are applicable for this operation. The list MUST NOT include duplicated parameters.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Responses">
<summary>
 Required. The nonempty list of possible status codes and responses as they are returned from executing this operation.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Produces">
<summary>
 A list of MIME types the operation can produce.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Consumes">
<summary>
 A list of MIME types the operation can consume.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.OperationId">
<summary>
 Unique string used to identify the operation.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Description">
<summary>
 A verbose explanation of the operation behavior.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Summary">
<summary>
 A short summary of what the operation does. This field SHOULD be less than 120 characters.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Tags">
<summary>
 A list of tags for API documentation control.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Type">
<summary>
 The type of the REST call.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.OperationObject.Path">
<summary>
 The name of the operation.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.OperationObject">
<summary>
 Describes a single API operation on a path.
 http://swagger.io/specification/#operationObject
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.ResponseObject.Schema">
<summary>
 A definition of the response structure. It can be a primitive, an array or an object. If this field does not exist, it means no content is returned as part of the response.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.ResponseObject.Description">
<summary>
 Required. A short description of the response.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.ResponseObject">
<summary>
 Describes a single response from an API Operation.
 http://swagger.io/specification/#responseObject
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.ParameterObject.CollectionFormat">
<summary>
 Determines the format of the array if type array is used.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.ParameterObject.Type">
<summary>
 The type of the parameter. Unlike the corresponding swagger field, this contains the Schema Object if &apos;in&apos; is of type Body.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.ParameterObject.Required">
<summary>
 Determines whether this parameter is mandatory. If the parameter is in &quot;path&quot;, this property is required and its value MUST be true. Otherwise, the property MAY be included and its default value is false.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.ParameterObject.Description">
<summary>
 A brief description of the parameter. This could contain examples of use.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.ParameterObject.In">
<summary>
 Required. The location of the parameter.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.ParameterObject.Name">
<summary>
 Required. The name of the parameter. Parameter names are case sensitive.
 If in is &quot;path&quot;, the name field MUST correspond to the associated path segment from the path field in the Paths Object. See Path Templating for further information.
 For all other cases, the name corresponds to the parameter name used based on the in property.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.ParameterObject">
<summary>
 Describes a single operation parameter.
 http://swagger.io/specification/#parameterObject
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.ParameterObjectLocation.Body">
<summary>
 The payload that&apos;s appended to the HTTP request. Since there can only be one payload, there can only be one body parameter. The name of the body parameter has no effect on the parameter itself and is used for documentation purposes only. Since Form parameters are also in the payload, body and form parameters cannot exist together for the same operation.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.ParameterObjectLocation.FormData">
<summary>
 Used to describe the payload of an HTTP request.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.ParameterObjectLocation.Path">
<summary>
 Used together with Path Templating, where the parameter value is actually part of the operation&apos;s URL. This does not include the host or base path of the API. For example, in /items/{itemId}, the path parameter is itemId.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.ParameterObjectLocation.Header">
<summary>
 Custom header that are expected as part of the request.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.ParameterObjectLocation.Query">
<summary>
 Parameter that are appended to the URL. For example, in /items?id=###, the query parameter is id.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.ParameterObjectLocation">
<summary>
 Required. The location of the parameter.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.CollectionFormat.Multi">
<summary>
 Corresponds to multiple parameter instances instead of multiple values for a single instance.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.CollectionFormat.Pipes">
<summary>
 Pipe separated values.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.CollectionFormat.Tsv">
<summary>
 Tab separated values.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.CollectionFormat.Ssv">
<summary>
 Space separated values.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.CollectionFormat.Csv">
<summary>
 Comma separated values.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.CollectionFormat">
<summary>
 Determines the format of the array if type array is used. Array value separator.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.OperationType.Delete">
<summary>
 Removes an element.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.OperationType.Post">
<summary>
 Adds an element.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.OperationType.Put">
<summary>
 Updates an element.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.OperationType.Get">
<summary>
 Returns en element or collection.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.OperationType">
<summary>
 The type of the REST call.
 http://swagger.io/specification/#pathItemObject
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.DefinitionProperty.Description">
<summary>
 A description of the property.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.DefinitionProperty.IsRequired">
<summary>
 True if the property is required.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.DefinitionProperty.Type">
<summary>
 The type of the property.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.DefinitionProperty.Name">
<summary>
 The name of the property.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.DefinitionProperty">
<summary>
 The property of a data type.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Reference">
<summary>
 A reference to an object defined by a Schema Object.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Dictionary">
<summary>
 Dictionary
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Object">
<summary>
 Object
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Array">
<summary>
 Array of items of type itemTy
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Enum">
<summary>
 Enumeration
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.File">
<summary>
 An additional primitive data type used by the Parameter Object and the Response Object to set the parameter type or the response as being a file.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.DateTime">
<summary>
 Date-Time (As defined by date-time - RFC3339).
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Date">
<summary>
 Date (As defined by full-date - RFC3339).
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.String">
<summary>
 String.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Double">
<summary>
 Double.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Float">
<summary>
 Float.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Int64">
<summary>
 Long (signed 64 bits).
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Int32">
<summary>
 Integer (signed 32 bits).
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Byte">
<summary>
 Byte - we need this to support byte[] transfered as base64 encoded string
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject.Boolean">
<summary>
 Boolean.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.SchemaObject">
<summary>
 A data type produced or consumed by operations.
 http://swagger.io/specification/#schemaObject
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.Parsers.UnknownSwaggerReferenceException">
<summary>
 Unknown reference
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.Parsers.UnsupportedSwaggerVersionException">
<summary>
 Unsupported Swagger version
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.Parsers.UnexpectedValueTypeException`1">
<summary>
 The `value` has unexpected type
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.Parsers.UnknownFieldValueException`1">
<summary>
 The `field` value is not specified in Swagger specification
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.Parsers.FieldNotFoundException`1">
<summary>
 Schema object does not contain the `field` that is Required in Swagger specification.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.Parsers.YamlNodeAdapter">
<summary>
 SchemaNode for Swagger schemes in Yaml format
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Schema.Parsers.JsonNodeAdapter">
<summary>
 Schema node for Swagger schemes in Json format
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.TryGetProperty(System.String)">
<summary>
 Try get property values from the map by property name
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.Properties">
<summary>
 Get the map value of an element (assuming that value is a map)
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.GetStringSafe(System.String)">
<summary>
 Gets the string value of the property if it exists. Empty string otherwise.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.GetStringArraySafe(System.String)">
<summary>
 Gets the string array for the property if it exists. Empty array otherwise.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.GetRequiredField(System.String,System.String)">
<summary>
 Get field that is `Required` in Swagger specification
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.AsStringArrayWithoutNull">
<summary>
 Get the string[] value of an element and exclude &apos;null&apos; strings (assuming that value is string or string[])
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.AsString">
<summary>
 Get the string value of an element (assuming that value is a string)
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.AsBoolean">
<summary>
 Get the boolean value of an element (assuming that value is a boolean)
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.SchemaNode.AsArray">
<summary>
 Get all elements of Node element. Returns an empty array if the value is not an array
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext.ApplicableParameters">
<summary>
 A list of parameters that are applicable for all the operations described under this path.
 These parameters can be overridden at the operation level, but cannot be removed there.
 The list MUST NOT include duplicated parameters. A unique parameter is defined by a combination of
 a name and location. The list can use the Reference Object to link to parameters that are defined
 at the Swagger Object&apos;s parameters. There can be one &quot;body&quot; parameter at most.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext.Responses">
<summary>
 An object to hold responses that can be used across operations.
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext.Parameters">
<summary>
 An object to hold parameters that can be used across operations
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext.Definitions">
<summary>
 An object to hold type definitions
</summary>
</member>
<member name="P:SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext.Empty">
<summary>
 Default empty context
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext.ResolveParameterObject(SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Resolve ParameterObject by `$ref` if such field exists
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseSwaggerObject(SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as a SwaggerSchema.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseTagObject(SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as a TagObject.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseInfoObject(SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as an InfoObject.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseDefinitionsObject(SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parse the SchemaNode as a SchemaObject[]
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parsePathsObject(SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext,SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parse the SchemaNode as a PathItemObject[]
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseOperationObject(SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext,System.String,SwaggerProvider.Internal.Schema.OperationType,SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as an OperationObject.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseResponsesObject(SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext,SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as a ResponseObject[].
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseResponsesDefinition(SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as a Responses  Definition Object
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseResponseObject(SwaggerProvider.Internal.Schema.Parsers.Parser.ParserContext,SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as a ResponseObject.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseParametersDefinition(SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parse the SchemaNode as a Parameters Definition Object
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseParameterObject(SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as a ParameterObject.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseOperationParameterLocation``1(``0,System.String)">
<summary>
 Parses string as a ParameterObjectLocation.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseDefinitionProperty(System.Collections.Generic.Dictionary{System.String,System.Lazy{SwaggerProvider.Internal.Schema.SchemaObject}},System.String,SwaggerProvider.Internal.Schema.Parsers.SchemaNode,System.Boolean)">
<summary>
 Parses DefinitionProperty
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.parseSchemaObject(System.Collections.Generic.Dictionary{System.String,System.Lazy{SwaggerProvider.Internal.Schema.SchemaObject}},SwaggerProvider.Internal.Schema.Parsers.SchemaNode)">
<summary>
 Parses the SchemaNode as a SchemaObject
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Schema.Parsers.Parser.isSwaggerSchemaExtensionName(System.String)">
<summary>
 Verify if name follows Swagger Schema Extension name pattern
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Compilers.DefinitionCompiler.GetProvidedTypes">
<summary>
 Compiles the definition.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Compilers.DefinitionCompiler.GetDefaultValue(SwaggerProvider.Internal.Schema.SchemaObject)">
<summary>
 Default value for parameters
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Compilers.DefinitionCompiler.CompileTy(System.String,System.String,SwaggerProvider.Internal.Schema.SchemaObject,System.Boolean)">
<summary>
 Compiles the definition.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Compilers.DefinitionCompiler">
<summary>
 Object for compiling definitions.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Compilers.OperationCompiler.CompilePaths(System.Boolean)">
<summary>
 Compiles the operation.
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Compilers.OperationCompiler">
<summary>
 Object for compiling operations.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Configuration.resolveReferencedAssembly(System.String)">
<summary>
 Given an assembly name, try to find it in either assemblies
 loaded in the current AppDomain, or in one of the specified
 probing directories.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Configuration.getProbingLocations">
<summary>
 Reads the &apos;SwaggerProvider.dll.config&apos; file and gets the &apos;ProbingLocations&apos;
 parameter from the configuration file. Resolves the directories and returns
 them as a list.
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Configuration.getAssemblyLocation(System.Reflection.Assembly)">
<summary>
 Returns the real assembly location - when shadow copying is enabled, this
 returns the original assembly location (which may contain other files we need)
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Configuration.searchDirectories(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Finds directories relative to &apos;dirs&apos; using the specified &apos;patterns&apos;.
 Patterns is a string, such as &quot;..\foo\*\bar&quot; split by &apos;\&apos;. Standard
 .NET libraries do not support &quot;*&quot;, so we have to do it ourselves..
</summary>
</member>
<member name="M:SwaggerProvider.Internal.Configuration.getSwaggerProviderRuntimeAssembly">
<summary>
 Returns the Assembly object of SwaggerProvider.Runtime.dll (this needs to
 work when called from SwaggerProvider.DesignTime.dll)
</summary>
</member>
<member name="T:SwaggerProvider.Internal.Configuration">
<summary>
 [omit]
</summary>
</member>
</members>
</doc>
